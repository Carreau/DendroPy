
## General

- Updated for full (and exclusive) Python 3.x compatibility.

- Faster, better, stronger! Core serialization/deserialization infrastructure rewritten from the ground up, with *many* optimizations for speed and reliability.

## Major (Potentially-Breaking Changed)

- Compatibility:
    - Python 2: Python 2.7
    - Python 3: Python 3.1, 3.2, 3.3, 3.4

- The entire `oid` system ("object identifier"), i.e., the unique id assigned to every data object, has been removed. This was an implementation artifact from NEXML parsing.

- The `dendropy.TaxonSet` class has been renamed `dendropy.TaxonNamespace` (and the corresponding `taxon_set` attribute of phylogenetic data objects that reference a taxonomic context has been renamed `taxon_namespace`).

### TaxonNamespace ###

- This `TaxonNamespace` class replaces the `TaxonSet` class as the manager for the `Taxon` objects.

- The API is largely similar with the following differences:

    - Calls to the ``__getitem__()`` and ``__delitem()__`` methods (e.g. 'TaxonNamespace[x]') now only accept integer values as arguments (representing indexes into the list of `Taxon` objects in the internal array).

    - `TaxonSet.has_taxon()` and `TaxonSet.has_taxa()` has been replaced by `TaxonNamespace.has_taxon_label()` and `TaxonNamespace.has_taxa_labels()` respectively.

    - Various new methods for accessing and managing the collection of `Taxon` objects (e.g., ``findall``, ``drop_taxon``, ``remove_taxon``, ``discard_taxon``, ``__delitem__``, etc.)



